###############################
# Docker compose file, 
# Last version of update: v0.95
# commands used: docker compose up, docker compose up --build
###############################


# Services, running instances
services:
# WEB HANDLER SECTION
  # FLASK router and handler
  flask:
    build: 
      context: .
      dockerfile: flask/Dockerfile
    restart: always
    environment:
      - PYTHONPATH=/app # Good to have here too if flask runs scripts/management commands
    # FLASK Environment Variables
      - SYSTEM_VERSION=${SYSTEM_VERSION}
      - API_VERSION=${API_VERSION}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - DIGEST_SECRET_KEY=${DIGEST_SECRET_KEY}
      - SECRET_REGISTER_API_KEY=${SECRET_REGISTER_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    
      - HARDWARE_SESSION_EXPIRE=${HARDWARE_SESSION_EXPIRE}
      - NUMBER_PRECISION=${NUMBER_PRECISION}

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT} 
      - REDIS_DB=${REDIS_DB} 
      - REDIS_TIMEOUT=${REDIS_TIMEOUT}
      - REDIS_DB_CELERY_BROKER=${REDIS_DB_CELERY_BROKER:-0} 
      - REDIS_DB_CELERY_BACKEND=${REDIS_DB_CELERY_BACKEND:-0}

      - LAST_READING_DB_BATCH_SIZE=${LAST_READING_DB_BATCH_SIZE}
      - LAST_READING_QUERY_RANGE_MINUTES=${LAST_READING_QUERY_RANGE_MINUTES}
      - SCHEDULER_INTERVAL_MINUTES=${SCHEDULER_INTERVAL_MINUTES} 
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - WEBPAGE_USER=${WEBPAGE_USER} 
      - WEBPAGE_PASS=${WEBPAGE_PASS} 
      - INFLUXDB_TIMEOUT=${INFLUXDB_TIMEOUT}
      - POSTGRES_PORT=${POSTGRES_PORT} 
      - POSTGRES_HOST=${POSTGRES_HOST} 
      - POSTGRES_TEST_PASS=${POSTGRES_TEST_PASS}
      - POSTGRES_USERS_ACCESS_PASS=${POSTGRES_USERS_ACCESS_PASS}
      - POSTGRES_AUDIO_ACCESS_PASS=${POSTGRES_AUDIO_ACCESS_PASS}
      - POSTGRES_TIMEOUT=${POSTGRES_TIMEOUT}
      - DATABASE_URL=${DATABASE_URL} 
    depends_on:
      - postgres
      - influxdb 
      - redis    
    volumes:
      - audio-volume:/app/app/audio_storage 
    ports: 
      - "8080:8080"
    expose:
      - "8080"
    networks:
      - beehive-network
  
  # NGINX Server
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - nextjs
      - flask
    ports:
      - "1024:80"
      - "8443:443"
    networks:
      - beehive-network
    
# CELERY WORKER SECTION - NEW
  celery_worker:
    build:
      context: .
      dockerfile: flask/Dockerfile
    restart: always
    # COMMAND: Assumes 'celery_app' instance is in 'app.background_worker.tasks' module
    command: celery -A app.background_worker.tasks.celery_app worker -P gevent -l debug
    environment:
      - PYTHONPATH=/app 
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_USERS_ACCESS_PASS=${POSTGRES_USERS_ACCESS_PASS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_TEST_PASS=${POSTGRES_TEST_PASS}
      - POSTGRES_USERS_ACCESS_PASS=${POSTGRES_USERS_ACCESS_PASS}
      - POSTGRES_AUDIO_ACCESS_PASS=${POSTGRES_AUDIO_ACCESS_PASS}
      - CELERY_BROKER_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY_BROKER:-0}
      - CELERY_RESULT_BACKEND=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY_BACKEND:-0}
      - REDIS_URL_FOR_APP=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}
      - SYSTEM_VERSION=${SYSTEM_VERSION}
      - API_VERSION=${API_VERSION}
      - NUMBER_PRECISION=${NUMBER_PRECISION}
      - FLASK_DEBUG=${FLASK_DEBUG}
      # Environment variables for InfluxDB if check_and_update_schedule_progress needs them directly
      # (though it seems to get them via os.getenv from its own file)
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_URL=${INFLUXDB_URL}
    depends_on:
      - postgres
      - redis
      - influxdb # Added influxdb as a dependency if tasks directly interact with it
    # volumes: # Keep commented if not used, or uncomment if audio-volume is needed
      # - audio-volume:/app/app/audio_storage
    networks:
      - beehive-network

  celery_beat:
    build:
      context: .
      dockerfile: flask/Dockerfile
    restart: always
    # COMMAND: Assumes 'celery_app' instance is in 'app.background_worker.tasks' module
    # This service will pick up the new hourly schedule from celery_app.conf.beat_schedule
    command: celery -A app.background_worker.tasks.celery_app beat -l debug --scheduler celery.beat.PersistentScheduler --schedule="/celerybeat_schedule_dir/celerybeat-schedule" --pidfile="/tmp/celerybeat.pid" --max-interval 30
    environment:
      - PYTHONPATH=/app # ADDED for correct module resolution
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - CELERY_BROKER_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY_BROKER:-0}
      - CELERY_RESULT_BACKEND=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY_BACKEND:-0}
      - REDIS_URL_FOR_APP=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}
      - POSTGRES_USERS_ACCESS_PASS=${POSTGRES_USERS_ACCESS_PASS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_TEST_PASS=${POSTGRES_TEST_PASS}
      - POSTGRES_USERS_ACCESS_PASS=${POSTGRES_USERS_ACCESS_PASS}
      - POSTGRES_AUDIO_ACCESS_PASS=${POSTGRES_AUDIO_ACCESS_PASS}
      - SYSTEM_VERSION=${SYSTEM_VERSION}
      - API_VERSION=${API_VERSION}
      - FLASK_DEBUG=${FLASK_DEBUG}
    # Often needed for gevent compatibility with beat
      # Environment variables for InfluxDB if check_and_update_schedule_progress needs them directly
      # (though it seems to get them via os.getenv from its own file)
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_URL=${INFLUXDB_URL}
    depends_on:
      - postgres
      - redis
      - influxdb # Added influxdb as a dependency
    volumes: # Assuming you want persistent beat schedule
       - celerybeat_schedule_files:/celerybeat_schedule_dir
    networks:
      - beehive-network

# DATABASE SECTION
  # Influxdb database
  influxdb:
    build: ./influxdb
    restart: always
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    volumes:
      - influxdb-volume:/var/lib/influxdb2
    ports:
      - "8087:8086"
    expose:
      - 8087 
    networks:
      - beehive-network


  # Postgres database
  postgres:
    build: 
      context: ./postgres
      args:
         POSTGRES_AUDIO_ACCESS_PASS: ${POSTGRES_AUDIO_ACCESS_PASS}
         POSTGRES_USERS_ACCESS_PASS: ${POSTGRES_USERS_ACCESS_PASS}
         POSTGRES_TEST_PASS: ${POSTGRES_TEST_PASS}
    restart: always
    environment:
      - POSTGRES_PASSWORD=${DOCKER_POSTGRES_PASSWORD}
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5544:5432" 
    expose:
      - 5432 
    networks:
      - beehive-network

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: beehive_redis
    restart: always
    ports:
      - "6379:6379"
    expose:
      - 6379
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - beehive-network
  
  nextjs:
    build: 
      context: ./nextjs
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_WEBSITE_URL=${NEXT_PUBLIC_WEBSITE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_WEBSITE_URL}
    depends_on:
      - flask 
    ports:
      - "3000:3000"
    networks:
      - beehive-network


#### Volumes ####
volumes:
  postgres-data:
  influxdb-volume:
  audio-volume:
  redis-data:
  celerybeat_schedule_files: {} # ADDED for persistent beat schedule

networks:
  beehive-network:
    driver: bridge